l<<header| =Writing a client/server Eliom application >>

//The code of this tutorial has been tested with Eliom3.// \\

In this chapter, we will write a [[site:graffiti/|collaborative
drawing application]].  It is a client/server web application
displaying an area where users can draw using the mouse, and see what
other users are drawing at the same time and in real-time.

<<webonly| The final eliom code is available
[[site:/darcs/tutorial/files/tutorial/chapter1/destillery-oclosure/|for download]]. >>

<<|outline target="documentation">>

==@@id="basics"@@ Basics==

To get started, we recommend to use <<a_manual project="eliom"
chapter="workflow-destillery"|Eliom's destillery>>, a program which
creates scaffolds for Eliom projects. The following command creates a
very simplicistic project called "graffiti" in the directory
"graffiti" (adapt it to your needs!):

<<code language="shell"|
$ eliom-destillery -name graffiti -template basic -target-directory graffiti
>>

===My first page===

<<concepts|Services\\Configuration file\\Static validation of HTML>>

Our web application consists of a single page for now. Let's start by
creating a very basic page.  We define the service that will implement
this page by the following declaration:

<<code language="ocaml" |
open Eliom_content.Html5.D (* provides functions to create HTML nodes *)

let main_service =
  Eliom_registration.Html5.register_service
    ~path:["graff"]
    ~get_params:Eliom_parameter.unit
    (fun () () ->
      Lwt.return
        (html
           (head (title (pcdata "Page title")) [])
           (body [h1 [pcdata "Graffiti"]])))
>>

If you're using {{{eliom-destillery}}} just replace the content of the
eliom-file by the above lines and run

<<code language="shell"|
$ make test.byte
>>

This will compile your application and run {{{ocsigenserver}}} on it.
(Refer to the <<a_manual project="eliom"
chapter="workflow-compilation"|manual>> on how to compile your project
"by hand".)

Your page is now available at URL [[http://localhost:8080/graff|{{{http://localhost:8080/graff}}}]].


<<concept title="Services"|

Unlike typical web programming techniques (CGI, PHP,~ ...), with
Eliom, you don't write one file for each URL, but a single OCaml module
(*.cmo or *.cma) for the whole web site.

The <<a_api project="eliom" | module Eliom_service >> module allows
to create new entry points to your web site, called //services//. In
general, services are attached to a URL and generate a web page.
Services are represented by OCaml values, through which you must
register a function that will generate a page.

The {{{~path}}} parameter corresponds to the URL where you want to
attach your service. It is a list of strings.  The value
<<code-inline|["foo"; "bar"]>> corresponds to the URL
<<code-inline|foo/bar>>.  <<code-inline|["dir"; ""]>> corresponds to
the URL <<code-inline|dir/>> (that is: the default page of the
directory <<code-inline|dir>>).

>>

<<concept title="Configuration file"|

In the directory of the project created by the Eliom-destillery, you
can find the file {{{graffiti.conf.in}}}. From this file and the
variables in {{{Makefile.options}}}, the configuration file for
{{{ocsigenserver}}} are generated. After testing your application, it
is available as {{{local/etc/graffiti/graffiti-test.conf}}}

It contains various directives for Ocsigen server (port, log files,
extensions to be loaded, etc.), taken from {{{Makefile.options}}} and
something like:

{{{
<host>
    <static dir="static" />
    <eliommodule module="/path_to/graffiti.cma" />
    <eliom />
</host>
}}}

These instructions tell the server to:

* serve files from the directory <<code-inline|
  /path_to/graffiti/static >> if they exist,
* generate pages from services in the Eliom application
  {{{graffiti.cma}}} otherwise.
* and finally, //run// Eliom ({{{<eliom />}}}).

>>

<<concept title="Static validation of HTML"|

There are several ways to create pages for Eliom.  You can generate
pages as strings (as in other web frameworks).  But we prefer checking
at compile time that the HTML will be correct.  Eliom provides several
modules to do that, either using OcamlDuce (if you have it installed)
or using OCaml's polymorphic variants.  This tutorial is using the
second solution, using the module <<a_api project="eliom"
| module Eliom_content.Html5.D >>. This module defines a
construction function for each HTML5 tag.

//Note that it is also possible to use the usual HTML syntax directly
 in OCaml, cf.  <<a_api project="tyxml" | module Pa_tyxml >>.//

Ocsigen uses the <<a_manual project="tyxml" |TyXML>>
library to build HTML tree.  The TyXML library is very strict and
compels you to respect HTML5 standard (with some limitations). For
example if you write:

<<code language="ocaml"|
(html
   (head (title (pcdata "")) [pcdata ""])
   (body [pcdata "Hallo"]))
>>

You will get the following error message, referring at the end of line 2:

{{{
Error: This expression has type ([> `PCDATA ] as 'a) Html5.elt
       but an expression was expected of type Html5_types.head_content_fun Html5.elt
       Type 'a is not compatible with type Html5_types.head_content_fun =
           [ `Base
           | `Command
           | `Link
           | `Meta
           | `Noscript of [ `Link | `Meta | `Style ]
           | `Script
           | `Style ]
       The second variant type does not allow tag(s) `PCDATA
}}}

where <<a_api project="tyxml" | type Html5_types.head_content_fun >>
is the type of content allowed inside {{{<head>}}} ({{{<base>}}},
{{{<command>}}}, {{{<link>}}}, {{{<meta>}}}, etc.). You see that
{{{`PCDATA}}} (i.e. raw text) is not included in this polymorphic
variant type.

**Another example:** In HTML5, some tags cannot be empty. For example
{{{<table>}}}must contain at least one row.  To enforce this, the
<<a_api project="tyxml" text="Html5.table"| val
Html5.F.table >> function takes two parameters: the first one is the
first row, the second one is a list containing all the other rows
(same thing for {{{<tr>}}}, {{{<form>}}}, {{{<select>}}}, ...).  This
forces the user to handle the empty list case specially and thus make
the output conform to the recommendation from the W3C.

//Strict typing of HTML may seem arduous initially, but in fact it is
very easy to get used to.  It actually saves a huge amount of
debugging time as you will never have to bother about the validity of
pages afterwards.//

A more detailed introduction to the construction of HTML5 tree is
available in the <<a_api project="tyxml" text="TyXML reference API" |
module Html5.F >>.

>>

<<concept title="Lwt"|

**Important warning:** All the functions you write must be written in
cooperative manner using Lwt. Lwt is a convenient way to
implement concurrent programs in OCaml, and is now also widely used
for applications not related to Ocsigen.

For now we will just use the {{{Lwt.return}}} function as above.  We
will come back later on Lwt programming.  You can also have a look at
the <<a_manual project="lwt"|Lwt programming guide>>.

>>

===Execute parts of the program on the client===

<<concepts|
Service sending an application\\
Client and server code\\
Compiling a web application with server and client parts\\
Calling JavaScript methods with Js_of_ocaml\\
>>

To create our first service, we used the function <<a_api
project="eliom" | val Eliom_registration.Html5.register_service>>, as we
wanted to return HTML5. But actually we want our service to send an
Eliom application.  To do so, we will create our own registration
module by using the functor {{{Eliom_registration.App}}}:

<<|BB
  This is a bit fast, especially if you just came to Ocsigen. The following
  questions popped into my mind: What is an Eliom application? What's its
  motivation, what comprises it and how does is work?
>>

<<code language="ocaml"|
module My_app =
  Eliom_registration.App (struct
      let application_name = "graffiti"
    end)
>>

It is now possible to use {{{My_app}}} for registering our main
service (now at URL {{{/}}}):

<<code language="ocaml"|
let main_service =
  My_app.register_service
    ~path:["graff"]
    ~get_params:Eliom_parameter.unit
    (fun () () ->
      Lwt.return
        (html
           (head (title (pcdata "Graffiti")) [])
           (body [h1 [pcdata "Graffiti"]]) ) )
>>

We now want to add some OCaml code to be executed by the browser. For
that purpose, Eliom provides a syntax extension to distinguish between
server and client code in the same file. We start by a very basic
program, that will display a message to the user by calling the
JavaScript function {{{alert}}}. Add the following lines to the
program,

<<code language="ocaml"|
{client{
  let _ = Eliom_lib.alert "Hello!"
}}
>>

After running again {{{make test.byte}}}, and visiting
[[http://localhost:8080/graff]], the browser will now load the file
{{{graffiti.js}}}, and open an alert-box accordingly.

<<concept title="Splitting the code into server and client parts"|

Eliom's syntax extension implements four kinds of quotations. Three of
them are available at source file toplevel:

At the very toplevel of your source file (i.e. //not// inside modules
or other server- /client-parts), you can use the following quotations
to specify for which side the code should run.

* {{{ {client{ ... }} }}} for client side specific code.
* {{{ {server{ ... }} }}} (optional) for server side specific code.
* {{{ {shared{ ... }} }}} for code that will be used both for the server and the client.
* Code outside of those quotations is assument to be only for server side.

**Client sections are executed once, when the client side process is launched.**
The client process is not restarted after each page change (and obviously
not after remote function calls).

In the Makefile created by the destillery we automatically split the
code by a syntax extension, compile the server part as usual, and
compile the client part using {{{js_of_ocaml}}} to create a JavaScript
file.

 >>

<<concept title="Client values on the server"|

Additionally, it is possible to create client values within the server
code by the following quotation:

<<code language="ocaml"|
  {typ{ expr }}
>>

where {{{typ}}} is the type of an expression {{{expr}}} on the client.
Note, that such a client values is abstract on the server, but becomes
concrete, once it is sent to the client with the next request.

(The {{{typ}}} can be ommitted, when it can be inferred from the usage of the client value in the server code.)

**Client values are executed on client side after the service returns.**
Use client values for example when a service or remote function wants
to ask the client to run something
(binding some event handler on some element it returns for example).

>>

<<concept title="Js_of_ocaml"|

The client-side parts of the program are compiled to JavaScript by
{{{js_of_ocaml}}}, which recompiles OCaml bytecode, to JavaScript.
It is <<a_manual project="js_of_ocaml" chapter="bindings"|easy>>
 to bind JavaScript libraries to call JavaScript functions
from OCaml programs. In the example, we are using the <<a_api
project="js_of_ocaml" | module Dom_html >> module, which is a binding
to allow the manipulation of an HTML page.

Js_of_ocaml is using a syntax extension to call JavaScript methods:
* {{{obj##m(a, b, c)}}} to call the method {{{m}}} of object {{{obj}}}
with parameters {{{(a, b, c)}}}
* {{{obj##m}}} to get a property
* {{{obj##m <- e}}} to set a property
* {{{jsnew constr (e1, ..., en)}}} to call a JavaScript constructor

Find more information in <<a_manual project="js_of_ocaml" |
Js_of_ocaml's manual >>.

>>

===Accessing server side variables on client side code===

<<concepts|
Executing client side code after loading a page\\
Sharing server side values\\
Converting an HTML value to a portion of page (a.k.a. Dom node)\\
Manipulating HTML node 'by reference'
>>

The client side process is not really separated from the server side,
we can access some server variables from client code. For instance:

<<code language="ocaml"|
let count = ref 0

let main_service =
  My_app.register_service
     ~path:[""]
     ~get_params:Eliom_parameter.unit
    (fun () () ->
      let c = incr count; !count in
      ignore {unit{
        Dom_html.window##alert(Js.string
	  (Printf.sprintf "You came %i times to this page" %c))
      }};
      Lwt.return
        (html
           (head (title (pcdata "Graffiti")) [])
           (body [h1 [pcdata "Graffiti"]]) ) )
>>

Here, we are increasing the reference {{{count}}} each time the page
is accessed. When the page is loaded and the document is in-place,
the client program initialize
the value inside {{{ {unit{ ... }} }}} and thus triggers an alert
window. More specifically, the variable {{{ c }}}, in the scope of
the client value on the server is made available in the client value
using the syntax extension {{{%c}}}. In doing so, the server side
value {{{ c }}} is displayed in a message box on the client.


<<concept

  title="Injections: Using server side values in client code" |

  Client side code can reference copies of server side values using
  the {{{%variable}}} syntax.  Values sent that way are
  weakly type checked: the name of the client side type must match the
  server side one.  If you define a type and want it to be available
  on both sides, declare it in the section {{{ {shared{ ... }} }}}. See the Eliom
  manual, for more information anout the <<a_manual project="eliom"
  chapter="clientserver-language" | Eliom's syntax extension >>
  and its <<a_manual project="eliom" chapter="workflow-compilation"
  fragment="compilation"|compilation process>>.

  Note well, that the value of an injection into a section {{{ {client{ ... }} }}}
  is sent only once when starting the application
  in the browser, and //not// synced automatically later (you may want
  to use <<a_api project="eliom" subproject="server"|module
  Eliom_react>>, however).

  In contrast, the values of injections into client values which are
  created during a request are sent alongside the next response.

>>

<<|BB/BS This only applies to elements created by Html5.F
It is possible to send almost any type of values that way, but keep in
mind that sent values are //copies// of server side ones. For HTML
elements, this is not always the expected behaviour. Considering the
following piece of code, the {{{onload}}} event handler won't do
anything noticeable because we added the {{{<div>some text</div>}}} to
a copy of the {{{<body>}}} element. Hence, the actual page's
{{{<body>}}} is not modified.

<<code language="ocaml"|
let main_service =
  My_app.register_service ~path:[""] ~get_params:Eliom_parameter.unit
    (fun () () ->
      let container = body [h1 [pcdata "Graffiti"]] in
      Eliom_service.onload {{
        Html5.Manip.appendChild %container (div [pcdata "some text"]);
      }}
      Lwt.return
        (html
           (head (title (pcdata "Graffiti")) [])
           (container) ) )
>>


==@@id="graffiti"@@ Collaborative drawing application==

===Drawing on a canvas===

<<concepts|

Canvas

>>

We now want to draw something on the page using an HTML5 canvas. The
drawing primitive is defined in the client-side function called
{{{draw}}} that just draws a line between two given points in a canvas.

To start our collaborative drawing application, we define another
client-side function {{{ init_client }}}, which just draws a single,
<<span style="color:#ffaa33;"|orange>> line for now.

Here is the (full) new version of the program:

<<code language="ocaml"|

{shared{
  (* Modules opened in the shared-section are available in client-
     and server-code *)
  open Eliom_content.Html5.D
  open Lwt
}}

module My_app =
  Eliom_registration.App (
    struct
      let application_name = "graffiti"
    end)

{shared{
  let width = 700
  let height = 400
}}

{client{
  let draw ctx (color, size, (x1, y1), (x2, y2)) =
    ctx##strokeStyle <- (Js.string color);
    ctx##lineWidth <- float size;
    ctx##beginPath();
    ctx##moveTo(float x1, float y1);
    ctx##lineTo(float x2, float y2);
    ctx##stroke()
}}

let canvas_elt =
  canvas ~a:[a_width width; a_height height]
    [pcdata "your browser doesn't support canvas"]

let page =
  (html
    (head (title (pcdata "Graffiti")) [])
    (body [h1 [pcdata "Graffiti"];
           canvas_elt] ) )
{client{
  let init_client () =
    let canvas = Eliom_content.Html5.To_dom.of_canvas %canvas_elt in
    let ctx = canvas##getContext (Dom_html._2d_) in
    ctx##lineCap <- Js.string "round";
    draw ctx ("#ffaa33", 12, (10, 10), (200, 100))
}}

let main_service =
  My_app.register_service ~path:[""] ~get_params:Eliom_parameter.unit
    (fun () () ->
      (* Cf. the box "Client side side-effects on the server" *)
      ignore {unit{ init_client () }};
      Lwt.return page)

>>

<<concept

  title="JavaScript datatypes in OCaml"|

  Note that we use the function <<a_api project="js_of_ocaml" | val
  Js.string>> from the Js_of_ocaml's library to convert an OCaml
  string into a JS string.

>>

<<concept title="Client side side-effect on the server" |

  What sounds a bit weird at first, is a very convenient practice for
  processing request in a client-server application: If a client value
  is created while processing a request, it will be evaluated on the
  client once he receives the response and the document is put in place;
  with this, the corresponding side effects are executed, of course.

  In the example above the line
  <<code language="ocaml"|
    ignore {unit{ init_client () }};
  >>

  creates such a client value which consists only of side effects, so
  the value can be {{{ignore}}}d, but Eliom will evaluate the value
  anyway, justs because it has been created!
>>

===Single user drawing application===

<<concepts|
Lwt\\
Mouse events with Lwt
>>

We now want to catch mouse events to draw lines with the mouse like
with the //brush// tools of any classical drawing application. One
solution would be to mimic classical JavaScript code in OCaml ; for
example by using the function <<a_api project="js_of_ocaml"| val
Dom_events.listen >> that is the Js_of_ocaml's equivalent of
{{{addEventListener}}}. However, this solution is at least as much
verbose than the JavaScript equivalent, hence not
satisfactory. Js_of_ocaml's library provides a much easier way to do that,
together with Lwt.

Replace the {{{init_client}}} of the previous example by the
following piece of code, then compile and draw!

<<code language="ocaml"|
{client{
let init_client () =

  let canvas = Eliom_content.Html5.To_dom.of_canvas %canvas_elt in
  let ctx = canvas##getContext (Dom_html._2d_) in
  ctx##lineCap <- Js.string "round";

  let x = ref 0 and y = ref 0 in

  let set_coord ev =
    let x0, y0 = Dom_html.elementClientPosition canvas in
    x := ev##clientX - x0; y := ev##clientY - y0
  in

  let compute_line ev =
    let oldx = !x and oldy = !y in
    set_coord ev;
    ("#ff9933", 5, (oldx, oldy), (!x, !y))
  in

  let line ev = draw ctx (compute_line ev); Lwt.return () in

  Lwt.async
    (fun () ->
      let open Lwt_js_events in
      mousedowns canvas
        (fun ev _ ->
          set_coord ev; line ev ~>>= fun () ->
          Lwt.pick [mousemoves Dom_html.document (fun x _ -> line x);
		    mouseup Dom_html.document ~>>= line]))
}}

>>

We use two references {{{x}}} and {{{y}}} to record the last mouse
position.  The function {{{set_coord}}} updates those references from
mouse event data.  The function {{{compute_line}}} computes the
coordinates of a line from the initial (old) coordinates to the new
coordinates--the event data sent as a parameter.

The last four lines of code, that implement the event handling loop, could be
read as: for each {{{mousedown}}} event on the canvas, do
{{{set_coord}}} then {{{line}}} (this will draw a dot), then
behave as the {{{first}}} of the two following lines to
terminate:

* For each mousemove event on the document, call {{{line}}} (never terminates)
* If there is a mouseup event on the document, call {{{line}}}.

<<concept title="More on Lwt" |

Functions in Eliom and Js_of_ocaml which do not implement just a
computation or direct side effect but are waiting for user activity,
file system access or need a unforseeable amount of time to return are
defined //in Lwt//; instead of returning a value of type {{{a}}} they
return an Lwt-thread of type {{{a Lwt.t}}}.

The only way to use the result of such functions (ones that return
values in the //Lwt monad//), is to use {{{Lwt.bind}}}.

<<code language="ocaml"| Lwt.bind : 'a Lwt.t -> ('a -> 'b Lwt.t) -> 'b
Lwt.t>> It is convenient to define an infix operator like this: <<code
language="ocaml"| let (~>>=) = Lwt.bind>> Then the code <<code
language="ocaml"| f () ~>>= fun x -> >> has to be read as <<code
language="ocaml"| let x = f () in>> but only for functions returning a
value in the Lwt monad.\\

For more clarity, there is a syntax extension for Lwt, defining a
new keyword {{{lwt}}} to be used instead of {{{let}}} for Lwt
functions: <<code language="ocaml"| lwt x = f () in>>

{{{Lwt.return}}} creates a terminated thread from a value (without
inserting a cooperation point):
<<code language="ocaml"| Lwt.return : 'a -> 'a Lwt.t>>
Use it when you must return something in the Lwt
monad (for example in a service handler, or often after a
{{{Lwt.bind}}}).

=====Why Lwt?=====

An Eliom application is a cooperative program, as the server must be
able to handle several requests at the same time.  Ocsigen is using
cooperative threading instead of the more widely used preemptive
threading paradigm. It means that no scheduler will interrupt your
functions whenever it wants. Switching from one thread to another is
done only when there is a //cooperation point//.

We will use the term //cooperative functions// to identify functions
implemented in cooperative way, that is: if something takes
(potentially a long) time to complete (for example reading a value
from a database), they insert a cooperation point to let other threads
run.  Cooperative functions return a value in the Lwt monad
(that is, a value of type {{{'a Lwt.t}}} for some type {{{'a}}}).

In our example, the function {{{Lwt_js_events.mouseup}}} may introduce
a cooperation point, because it is unforseeable when this event
happens. That's why it returns a value in the Lwt monad.

Using cooperative threads has a huge advantage: as you know precisely
where cooperation points are, //you need very few mutexes// and you
have //very few risks of deadlocks//!

Using Lwt is very easy and does not cause troubles, provided you never
use //blocking functions// (non cooperative functions).  //Blocking
functions can cause the entre server to hang!// Remember:

* Use the functions from module {{{Lwt_unix}}} instead of module
 {{{Unix}}},
* Use cooperative database libraries (like PG'Ocaml for Lwt),
* If you want to use a non-cooperative function, detach it in another
  preemptive thread using <<a_api project="lwt" | val
  Lwt_preemptive.detach >>,
* If you want to launch a long-running computation, manually insert
  cooperation points using {{{Lwt_unix.yield}}},
* {{{Lwt.bind}}} does not introduce any cooperation point.

>> <<| END "encadre" >>

<<concept

  title="Handling events with Lwt"|

  The module <<a_api project="js_of_ocaml" | module Lwt_js_events>>
  allows to define event listeners easily using Lwt.
  For example <<a_api project="js_of_ocaml" | val Lwt_js_events.click >>
  takes a DOM element and returns a Lwt thread that will wait until
  a click occures on this element.

  Functions with an ending "s" (<<a_api project="js_of_ocaml" | val Lwt_js_events.clicks >>, <<a_api project="js_of_ocaml" | val Lwt_js_events.mousedowns >>, ...) start again waiting after the handler terminates.

  <<a_api project="lwt" | val Lwt.pick >> behaves as the first thread in the
  list to terminate, and cancels the others.

>>

===Collaborative drawing application===

<<concepts|Client server communication >>

In order to see what other users are drawing, we now want to do the following:

* Send the coordinates to the server when the user draw a line, then
* Dispatch the coordinates to all connected users.

We first declare a type, shared by the server and the client,
describing the color and coordinates of drawn lines.

<<code language="ocaml"|
{shared{
  type messages = (string * int * (int * int) * (int * int))
    deriving (Json)
}}
>>

We annotate the type declaration with {{{deriving (Json)}}} to allow
type-safe deserialization of this type. Eliom forces you to use this
in order to avoid server crashes if a client sends corrupted data.
This is defined using as [[https://github.com/hnrgrgr/deriving|custom
version]] of the
[[http://code.google.com/p/deriving/wiki/Introduction|Deriving syntax
extension]].  You need to do that for each type of data sent by the
client to the server.  This annotation can only be added on types
containing exclusively basics type or other types annotated with
deriving. See the Js_of_ocaml API, for more information on the <<a_api
project="js_of_ocaml" | module Deriving_Json >> module.

Then we create an Eliom bus to broadcast drawing events to all client
with the function <<a_api project="eliom" subproject="server"| val
Eliom_bus.create >>. This function take as parameter the type of
values carried by the bus.

<<code language="ocaml"|
let bus = Eliom_bus.create Json.t<messages>
>>

To write draw orders into the bus, we just replace the function
{{{line}}} in {{{init_client}}} by:

<<code language="ocaml"|
let line ev =
  let v = compute_line ev in
  let _ = Eliom_bus.write %bus v in
  draw ctx v;
  Lwt.return () in
>>

Finally, to interpret the draw orders read on the bus, we add the
following line at the end of function {{{init_client}}}:

<<code language="ocaml"|
  Lwt.async (fun () -> Lwt_stream.iter (draw ctx) (Eliom_bus.stream %bus))
>>

Now you can try the program using two browser windows to see that the
lines are drawn on both windows.

<<concept

  title="Communication channels"|

  Eliom provides multiple ways for the server to send unsolicited data
  to the client:

* <<a_api project="eliom" subproject="server"
  | type Eliom_bus.t >> are broadcasting channels where
  client and server can participate (see also <<a_api project="eliom"
  subproject="client" | type Eliom_bus.t >> in the client
  api).
* <<a_api project="eliom" subproject="server" | module
  Eliom_react >> allows to send
  [[http://erratique.ch/software/react/doc/React|React events]] from
  the server to the client and conversly.
* <<a_api project="eliom" subproject="server" | type
  Eliom_comet.Channels.t >> are one way communication channels
  allowing finer control. It allow sending <<a_api project="lwt" |
  module Lwt_stream >> to the client.  Eliom_react and Eliom_bus are
  implemented over it.

  It is possible to control the idle behaviour with module <<a_api
  project="eliom" subproject="client" | module
  Eliom_comet.Configuration >>.

>>

===Color and size of the brush===

<<concepts| Widgets with OClosure >>

In this section, we add a color picker and slider to choose the size
of the brush. For that we used add two widgets provided by the
<<a_manual project="oclosure"|OClosure widget library>>.

<<wip|
This part of the tutorial needs to be upgraded.
The OClosure project currently has no maintainer and we don't really
want to encourage people to use it.

Other JS widgets libraries fit better the Eliom model
(making possible to create the widgets on server side).
We should switch to something else, for example JQuery.

OClosure is not packaged in opam either.
If you want to try this section, you need to install it from
[[wiki(33):install|source]].
>>


In the {{{Makefile.options}}}, created by Eliom's destillery, just add {{{oclosure}}} to the (currently empty) {{{CLIENT_PACKAGES}}}:
<<code language="makefile"|
CLIENT_PACKAGES := oclosure
>>

To create the widgets, we add the following code in the
{{{init_client}}} immediatly after canvas configuration:

<<code language="ocaml"|
(* Size of the brush *)
let slider = jsnew Goog.Ui.slider(Js.null) in
slider##setMinimum(1.);
slider##setMaximum(80.);
slider##setValue(10.);
slider##setMoveToPointEnabled(Js._true);
slider##render(Js.some Dom_html.document##body);
(* The color palette: *)
let pSmall =
  jsnew Goog.Ui.hsvPalette(Js.null, Js.null,
                           Js.some (Js.string "goog-hsv-palette-sm"))
in
pSmall##render(Js.some Dom_html.document##body);
>>

And to change the size and the color of the brush, we replace the last
line of the function {{{compute_line}}} in {{{init_client}}} by:

<<code language="ocaml"|
let color = Js.to_string (pSmall##getColor()) in
let size = int_of_float (Js.to_float (slider##getValue())) in
(color, size, (oldx, oldy), (!x, !y))
>>


As last step, we need to add some stylesheets and one JavaScript file
in the headers of our page. To ease the creation of the
{{{head}}}-element in HTML we use the function <<a_api project="eliom"
subproject="server"|val Eliom_tools.F.head>>:

<<code language="ocaml"|
let page =
  html
    (Eliom_tools.F.head ~title:"Graffiti"
       ~css:[
         ["css";"common.css"];
         ["css";"hsvpalette.css"];
         ["css";"slider.css"];
         ["css";"graffiti.css"];
         ["graffiti_oclosure.js"];
      ]
      ~js:[ ["graffiti_oclosure.js"] ] ())
    (body [h1 [pcdata "Graffiti"]; canvas_elt])
>>

You need to install the corresponding stylesheets and images into your
project.  The stylesheet files should go in the directory
{{{static/css}}}

* the <<a_file src="tutorial/static/css/common.css"|{{{common.css}}}>>
  and <<a_file src="tutorial/static/css/hsvpalette.css"|{{{hsvpalette.css}}}>>
  are taken from the Google Closure library;
* the <<a_file src="tutorial/static/css/slider.css"|{{{slider.css}}}>>
  and <<a_file src="tutorial/static/css/graffiti.css"|{{{graffiti.css}}}>> are
  home-made css; and

the following image should go into ##static/images##:
* the <<a_file src="tutorial/static/images/hsv-sprite-sm.png"|{{{hsv-sprite-sm.png}}}>>

Finally, the {{{graffiti_oclosure.js}}} script must be generated. To
do this, first, generate the original {{{graffiti.js}}} script by
<<code language="shell"|
$ make byte
>>

Then use {{{oclosure_req}}} to generate the Oclosure-specific
{{{local/var/www/graffiti/eliom/graffiti_oclosure.js}}} script from
the original

<<code language="shell"|
$ oclosure_req local/var/www/graffiti/eliom/graffiti.js
>>

Then you can test your application ({{{make test.byte}}}).

<<concept

  title="OClosure" |

  OClosure is a Js_of_ocaml binding for the Google Closure widget
  library (used for example in GMail, Google Calendar or Google Maps).
  You can use it for building complex user interfaces for your Eliom
  application. The full documentation is available [[wiki(33):|on the
  project's site]].

>>

===@@id="initial-image"@@ Sending the initial image===

<<concepts|Services sending other data types>>

To finish the first part of the tutorial, we want to save the current
drawing on server side and send the current image when a new user
arrives. To do that, we will use the
[[http://www.cairographics.org/cairo-ocaml/|Cairo binding]] for OCaml.

For using Cairo, first, make sure that it is installed. If you are
using the bundle, it should have been configured with the option
{{{--enable-cairo}}}. Second, add it to the {{{SERVER_PACKAGES}}} in
your {{{Makefile.options}}}:
<<code language="makefile"|
SERVER_PACKAGES := cairo2
>>

The {{{draw_server}}} function below is the equivalent of the
{{{draw}}} function on the server side and the {{{image_string}}}
function outputs the PNG image in a string.

<<code language="ocaml"|
let rgb_from_string color = (* color is in format "#rrggbb" *)
  let get_color i =
    (float_of_string ("0x"^(String.sub color (1+2*i) 2))) /. 255.
  in
  try get_color 0, get_color 1, get_color 2 with | _ -> 0.,0.,0.

let surface = Cairo.Image.create Cairo.Image.ARGB32 ~width ~height

let draw_server =
  let ctx = Cairo.create surface in
  (fun ((color : string), size, (x1, y1), (x2, y2)) ->

    (* Set thickness of brush *)
    Cairo.set_line_width ctx (float size) ;
    Cairo.set_line_join ctx Cairo.JOIN_ROUND ;
    Cairo.set_line_cap ctx Cairo.ROUND ;
    let r, g, b =  rgb_from_string color in
    Cairo.set_source_rgb ctx ~r ~g ~b ;

    Cairo.move_to ctx (float x1) (float y1) ;
    Cairo.line_to ctx (float x2) (float y2) ;
    Cairo.Path.close ctx ;

    (* Apply the ink *)
    Cairo.stroke ctx ;
   )

let image_string =
   (fun () ->
     let b = Buffer.create 10000 in
     (* Output a PNG in a string *)
     Cairo.PNG.write_to_stream surface (Buffer.add_string b);
     Buffer.contents b
   )

let _ = Lwt_stream.iter draw_server (Eliom_bus.stream bus)

>>

We also define a service that send the picture:

<<code language="ocaml"|
let imageservice =
  Eliom_registration.String.register_service
    ~path:["image"]
    ~get_params:Eliom_parameter.unit
    (fun () () -> Lwt.return (image_string (), "image/png"))
>>

<<concept

  title="Eliom_registration"|

  The module {{{Eliom_registration}}} defines several modules with
  registration functions for a variety of data types. We have already
  seen {{{Eliom_registration.Html5}}} and {{{Eliom_registration.App}}}.
  The module {{{Eliom_registration.String}}} sends arbitrary byte output
  (represented by an OCaml string). The handler function must return
  a pair consisting of the content and the content-type.

  There are also several other output modules, for example:

* {{{Eliom_registration.File}}} to send static files
* {{{Eliom_registration.Redirection}}} to create a redirection towards another page
* {{{Eliom_registration.Any}}} to create services that decide late what
they want to send
* {{{Eliom_registration.Ocaml}}} to send any OCaml data to be used in a
client side program
* {{{Eliom_registration.Action}}} to create service with no output
(the handler function just performs a side effect on the server)
and reload the current page (or not). We will see an example of actions
in the next chapter.

>>

We now want to load the initial image once the canvas is created.  Add
the following lines just between the creation of the canvas context and the
creation of the slider:

<<code language="ocaml"|
(* The initial image: *)
let img =
  Eliom_content.Html5.To_dom.of_img
    (img ~alt:"canvas"
       ~src:(make_uri ~service:%imageservice ())
       ())
in
img##onload <- Dom_html.handler
                (fun ev -> ctx##drawImage(img, 0., 0.); Js._false);
>>

After compiling the project ({{{make byte}}} and the call to
{{{oclosure_req}}}), you are ready to try your graffiti-application
by {{{make test.byte}}}.

Note, that the {{{Makefile}}} from the destillery automatically adds
the packages defined in {{{SERVER_PACKAGES}}} as an extension in your configuration file {{{local/etc/graffiti/graffiti-test.conf}}}:

<<code language="xml"|
  <extension findlib-package="cairo2" />
>>

The first version of the program is now complete. You may want now to
install the application by running

<<code language="shell"|
$ make all
$ sudo make install
>>

<<webonly| <<a_file src="tutorial.tar.gz"| Download the code>>.>>

<<div class="exercices"|

====Exercises====

* Add an OClosure button to make possible to download the current
  image and save it to the hard disk (reuse the service
  {{{imageservice}}}).
  <<|BB
    Wrapping my head around the huge oclosure-API offhanded is very hard. A
    hint on how to register a click-listener with the button would help.
  >>
* Add an OClosure button with a color picker to select a color from
  the drawing. Pressing the button changes the mouse cursor, and disables
  current mouse events until the next mouse click event on the document.
  Then the color palette changes to the color of the pixel clicked.
  (Use the function {{{Dom_html.pixel_get}}}).

>>

[[wiki:intro|prev]]
[[wiki:interaction|next]]
